[{"title":"CentOS7入门教程","url":"/posts/20230114-57b79574aee1.html","content":"CentOS 常用命令。\n\n\n\n查看 centos 系统发布版本# 安装软件包yum -y install dotnet-sdk-6# 重新安装包yum -y reinstall dotnet-sdk-6.0# 卸载软件包yum remove dotnet-sdk-6\n\n查看磁盘信息# 显示磁盘空间df -m\n\n在 centos 上安装 dotnet文档\n第一次安装时需要执行已下命令\nrpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm\n\nyum -y install dotnet-sdk-6.0yum -y install aspnetcore-runtime-6.0\n\nfind文件查找\n# 查找根目录下(包含子目录)的文件find / -name nginx.conf# 模糊搜索（加双引号）find / -name &quot;*.conf&quot;# 不区分大小写find / -iname &quot;*.conf&quot;# 删除搜索到的文件find / -iname &quot;*.conf&quot; -exec rm &#123;&#125; \\;# 排除文件夹搜索find / -path /mnt -prune -o -iname &quot;docker.*&quot; -type f\n\nchmod在 winscp 上面建了一个文件，但是在 centos 上没有权限执行。需要先修改文件权限后，才可执行。执行时使用 .&#x2F;identity.sh 执行\n# 修改文件权限chmod +x identity.sh\n\nmv1.移动文件或文件夹2.重命名文件或文件夹\nmv file.txt filename.txt\n\nsystemctl设置 service 文件 https://blog.51cto.com/u_15310950/3170899\n示例文件：/etc/systemd/system/dnsserver.service\n[Unit]Description=&quot;DnsServer Service&quot;[Service]Type=simpleGuessMainPID=trueWorkingDirectory=/var/www/dnsserver/StandardOutput=journalStandardError=journalExecStart=/usr/bin/dotnet DnsService.dllRestart=always[Install]WantedBy=multi-user.target\n\n\n\n# 查看启动项systemctl list-units --type=service# 移除服务的开机自启systemctl disable gitlib.service# 查看启动失败的服务systemctl --failed# 查看开机自启动的服务列表systemctl list-unit-files | grep enabled# 启动文件变更后用与重新加载service的命令systemctl daemon-reload\n\njournalctl# 查看systemctl启动日志# 当服务启动失败时，又没有提示的情况下，可以使用下列命令来查看启动日志journalctl -f# 推荐使用journalctl -xe\n\nrpm# 安装rpm包rpm -ivh example.rpmrpm -ivh https://example.rpm# 查找已安装的软件rpm -qarpm -qa | grep gitlib# 卸载gitlib和其依赖项rpm -e gitlib# 卸载rpm安装的软件 不卸载依赖项rpm -e --nodeps gitlib# rpm -e --nodeps java-1.6.0-openjdk-1.6.0.0-1.66.1.13.0.el6.i686\n\ntail一般用户查看日志文件\n# 实时显示日志内容tail -f 文件名\n\n临时环境变量# 设置变量config = test_config# 打印变量echo config# 使用变量echo $config/name\n\nyum# 列出已安装的程序包yum list installed# 列出可更新的程序包yum list updates# 显示已安装的程序包yum list installed | grep axel# 卸载包yum erase nginx.x86_64\n\naxel多线程下载工具\nyum -y install axelaxel -n 10 https://www.baidu.com.exe\n\n软链接 （快捷方式）ln /usr/local/lib/docker/cli-plugins/docker-compose /usr/lib/bin/docker-compose\n\n环境变量## 打开文件vi /etc/profile## 在最后添加这行export PATH=$PATH:/usr/local/git/bin# 刷新环境变量source /etc/profile\n\nps文档\n# 查看所有进程ps aux\n","categories":["开发文档","CentOS7"],"tags":["CentOS7"]},{"title":"CentOS7安装最新版PHP","url":"/posts/20230118-222f3aebc232.html","content":"本文介绍在 CentOS 7 操作系统上安装 PHP 最新版本的方法。\n\n\n一、添加 EPEL 和 REMI 存储库sudo yum install epel-release yum-utilssudo yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm\n\n二、安装最新的 PHP1. 列出所有可用的 PHP 版本yum repolist all |grep php\n\n2. 启用 PHP Remi 仓库启用根据上一步获得的最新的 PHP 版本仓库\nsudo yum-config-manager --enable remi-php82\n\n3. 安装 PHP 和相关扩展sudo yum install php php-cli php-fpm php-mysqlnd php-zip \\  php-devel php-gd php-mcrypt php-mbstring php-curl php-xml \\  php-pear php-bcmath php-json php-redis\n\n4. 验证安装执行命令后能看到 PHP 版本号，说明已安装成功\nphp --version\n\n5. 重启 php-fpm 服务让 php-fpm 使用最新的 PHP 版本\nsystemctl restart php-fpm\n\n扩展知识1. 查看启用的模块php --modules\n\n相关参考\n在 CentOS 7 系统上安装 PHP 7.4 版本的方法\n如何在 CentOS 7 安装 PHP\n\n","categories":["开发文档"],"tags":["CentOS7","PHP"]},{"title":"Centos7编译安装nginx","url":"/posts/20230624-afb73e5e425c.html","content":"使用 yum 安装的 nginx 默认不带有 stream 模块，经过数次编译安装尝试，最终成功，特此记录\n\n\n点击前往 Nginx 官网\n参考文档\n下载源码#下载wget https://nginx.org/download/nginx-1.24.0.tar.gz#解压tar -xzf nginx-1.24.0.tar.gzcd nginx-1.24.0\n\n安装编译环境yum updateyum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel openssl11 openssl11-devel\n\n配置、编译、安装1.添加用户和组\ngroupadd wwwuseradd -g www www\n\n2.配置 nginx\n./configure \\--user=www \\--group=www \\--prefix=/usr/local/nginx \\--with-compat \\--with-debug \\--with-file-aio \\--with-google_perftools_module \\--with-http_addition_module \\--with-http_auth_request_module \\--with-http_dav_module \\--with-http_degradation_module \\--with-http_flv_module \\--with-http_gunzip_module \\--with-http_gzip_static_module \\--with-http_image_filter_module=dynamic \\--with-http_mp4_module \\--with-http_perl_module=dynamic \\--with-http_random_index_module \\--with-http_realip_module \\--with-http_secure_link_module \\--with-http_slice_module \\--with-http_ssl_module \\--with-http_stub_status_module \\--with-http_sub_module \\--with-http_v2_module \\--with-http_xslt_module=dynamic \\--with-mail=dynamic \\--with-mail_ssl_module \\--with-pcre \\--with-pcre-jit \\--with-stream=dynamic \\--with-stream_ssl_module \\--with-stream_ssl_preread_module \\--with-threads\n\n3.编译和安装\nmake &amp;&amp; make install\n\n4.验证\n/usr/local/nginx/sbin/nginx -V\n\n5.创建软链\nln -s /usr/local/nginx/sbin/nginx /usr/sbin/nginx\n\n开机自启1.创建systemd配置文件\n[Unit]Description=The nginx124 HTTP and reverse proxy serverAfter=network-online.target remote-fs.target nss-lookup.targetWants=network-online.target[Service]Type=forkingPIDFile=/usr/local/nginx/logs/nginx.pid# Nginx will fail to start if /usr/local/nginx/logs/nginx.pid already exists but has the wrong# SELinux context. This might happen when running `nginx -t` from the cmdline.# https://bugzilla.redhat.com/show_bug.cgi?id=1268621ExecStartPre=/usr/bin/rm -f /usr/local/nginx/logs/nginx.pidExecStartPre=/usr/sbin/nginx124 -tExecStart=/usr/sbin/nginx124ExecReload=/usr/sbin/nginx124 -s reloadKillSignal=SIGQUITTimeoutStopSec=5KillMode=processPrivateTmp=true[Install]WantedBy=multi-user.target\n\n将上述内容写入文件/usr/lib/systemd/system/nginx124.service中\nvim /usr/lib/systemd/system/nginx124.service\n\n2.启动和设置开机自启\nsystemctl start nginx124systemctl enable nginx124\n\n问题1. 运行 config 命令后出现 --with-openssl = &lt;path&gt; 时，通过下列命令解决yum remove -y openssl-devel openssl11 openssl11-develyum install -y openssl-devel openssl11 openssl11-devel\n","categories":["开发文档"],"tags":["文档"]},{"title":"Docker入门教程","url":"/posts/20230113-0640249be532.html","content":"别使用yum -y install docker安装，会安装到旧版 docker。有些命令不支持，不推荐使用此方法\n\n\n安装\n注意：别使用yum -y install docker安装，会安装到旧版 docker。有些命令不支持，不推荐使用此方法\n\n文档\nCentos 安装安装 docker-ce (docker 引擎)# 卸载旧版sudo yum remove docker \\  docker-client \\  docker-client-latest \\  docker-common \\  docker-latest \\  docker-latest-logrotate \\  docker-logrotate \\  docker-enginesudo yum install -y yum-utils# 设置存储库（比较慢）sudo yum-config-manager \\  --add-repo \\  https://download.docker.com/linux/centos/docker-ce.repo# 使用阿里云sudo yum-config-manager \\    --add-repo \\    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# 清华大学源sudo yum-config-manager \\    --add-repo \\    https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo# 安装 Docker 引擎sudo yum -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\n安装 Docker Composehttps://www.runoob.com/docker/docker-compose.html\n文档|使用文档\n# 下载 docker-composewget https://github.com/docker/compose/releases/download/v2.14.1/docker-compose-linux-x86_64 -O /usr/local/bin/docker-compose# 添加执行权限sudo chmod +x /usr/local/bin/docker-compose# 创建软链接ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose# 测试是否安装成功docker-compose version# 如果目录不存在就创建目录 并且将目录添加到环境变量#mkdir /usr/bin## 打开文件#vi /etc/profile## 在最后添加这行#export PATH=$PATH:/usr/bin# 刷新环境变量#source /etc/profile# 创建软链接#ln /usr/local/lib/docker-compose /usr/bin/docker-compose\n\nWindows直接安装 Desktop Docker\n命令builddocker build -t mekumiao/webapi:latest .\n\ninspect查看容器配置\ndocker inspect db\n\n3.修改配置文件找到容器的配置文件&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;容器 id&#x2F;config.v2.json，找到”Env”:[“PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin”]，把需要添加的环境变量添加上去，”Env”:[“TZ&#x3D;Asia&#x2F;Shanghai”,”PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin”]这里我添加了个”TZ&#x3D;Asia&#x2F;Shanghai”环境变量 如果需要添加多个环境变量，以逗号隔开就行\ndocker-compose# 编译构建文件中的镜像docker-compose build# 后台运行容器docker-compose up -d\n\n查看 docker 占用空间情况docker system df\n\n清理 build cachedocker builder prune#保留24小时内的缓存docker builder prune --filter &#x27;until=24h&#x27;\n","categories":["开发文档","Docker"],"tags":["docker"]},{"title":"Docker容器访问宿主机网络","url":"/posts/20230119-0e8dd9f51771.html","content":"参考链接\nDocker 容器访问宿主机网络\n\n\n\n一、使用宿主机 IP172.17.0.1\n\n二、使用 host 网络docker run -d --name nginx --network host nginx\n","categories":["开发文档","Docker"],"tags":["Docker"]},{"title":"Flutter入门教程","url":"/posts/20230111-a91005852312.html","content":"本文介绍：Bloc 设计模式，在项目中配置自动生成 asset 资源，window 平台下设置鼠标手势滑动，如何减小打包的 apk 体积。\n\n\n\n参考官网文档中文文档中文网本地化文档Flutter 实战·第二版arb 文件文档\n安装文档\n命令# 更新flutterflutter upgrade# 检查flutter配置flutter doctor# 同意 Android 协议flutter doctor --android-licenses# 配置android-sdk位置flutter config --android-sdk &quot;E:/android/sdk&quot;# 创建项目flutter create testdemo --org com.sir.testdemo --template=app# 创建包flutter create testpackage --template=package# 启用/禁用 功能flutter --enable-windows-desktopflutter --no-enable-windows-desktopflutter --enable-webflutter --no-enable-webflutter --enable-androidflutter --no-enable-androidflutter --enable-iosflutter --no-enable-ios# 还原依赖flutter pub get# 安装依赖flutter pub add sp_utils\n\nBloc 设计模式官网地址\nbloc 设计模式解释: Business Logic Component ,业务逻辑组件\n\nBaseBloc 抽象类里面的 emit 作用在于变更状态和触发 state 的 onChange 事件(与我们自己定义的时间不是一个，千万别混淆)\nBloc 类中有个 on 方法，作用在于订阅自定义事件。该事件由 add 方法向 stream 中添加 event 的形式触发，定义 eventHandler 来处理相应的 state，并携带上新的 state 调用上述 emit 方法。\n调用上述 emit 时会向_stateController 里添加变更后的 state，他会触发这个 stream 的订阅。使用 BlocListener 订阅 StateStream\n\n在项目中配置自动生成 asset 资源github 文档\nl10n.yaml 文件例子arb-dir: lib/l10ntemplate-arb-file: app_en.arboutput-localization-file: app_localizations.dartnullable-getter: false\n\n保证文字大小不受手机系统设置影响MaterialApp(    builder: (BuildContext context, Widget? child) &#123;      /// 保证文字大小不受手机系统设置影响      /// https://www.kikt.top/posts/flutter/layout/dynamic-text/      return MediaQuery(        data: MediaQuery.of(context).copyWith(textScaleFactor: 1),        child: child!,      );    &#125;,);\n\n切换页面或主题时设置导航栏颜色\n仅 Android 有效\n\nMaterialApp(    builder: (BuildContext context, Widget? child) &#123;      if (Device.isAndroid) &#123;        /// 切换深色模式会触发此方法，这里设置导航栏颜色        ThemeUtils.setSystemNavigationBar(state.item1);      &#125;      return child;    &#125;,);\n\nwindow 平台下设置鼠标手势滑动MaterialApp(    scrollBehavior: const MaterialScrollBehavior().copyWith(      scrollbars: true,      dragDevices: &#123;        PointerDeviceKind.touch,        PointerDeviceKind.stylus,        PointerDeviceKind.invertedStylus,        // 解决desktop端使用鼠标不能拖动问题        PointerDeviceKind.mouse,        PointerDeviceKind.unknown      &#125;,    ),);\n\npackageflutter_inappwebview\nflutter 内部 webview，可以监听 url\n\nclass OAuthView extends StatelessWidget &#123;  const OAuthView(&#123;    Key? key,    required this.initialUrl,  &#125;) : super(key: key);  final Uri initialUrl;  @override  Widget build(BuildContext context) &#123;    return Scaffold(      appBar: const MyAppBar(title: &#x27;OAuth&#x27;),      body: BlocSelector&lt;OauthBloc, OauthState, int&gt;(        selector: (state) &#123;          return state.position;        &#125;,        builder: (context, state) &#123;          return IndexedStack(            index: state,            children: &lt;Widget&gt;[              const ColoredBox(                color: Colors.white,                child: Center(                  child: CircularProgressIndicator(),                ),              ),              InAppWebView(                initialUrlRequest: URLRequest(url: initialUrl),                initialOptions: InAppWebViewGroupOptions(                  crossPlatform: InAppWebViewOptions(                    useShouldOverrideUrlLoading: true,                  ),                ),                onLoadStop: (controller, url) &#123;                  context.read&lt;OauthBloc&gt;().add(OauthLoadSuccessEvent());                &#125;,                shouldOverrideUrlLoading: (                  controller,                  shouldOverrideUrlLoadingRequest,                ) async &#123;                  final url = shouldOverrideUrlLoadingRequest.request.url;                  if (url != null) &#123;                    if (url.scheme == &#x27;kumiao.movieapp&#x27; &amp;&amp;                        url.host == &#x27;oauth2redirect&#x27;) &#123;                      unawaited(Navigator.of(context).maybePop(url));                      return NavigationActionPolicy.CANCEL;                    &#125;                  &#125;                  return NavigationActionPolicy.ALLOW;                &#125;,              ),            ],          );        &#125;,      ),    );  &#125;&#125;\n\n常见问题如何减小打包的 apk 体积# 减小打包体积(推荐使用。symbols的作用是存放从apk里分离出来的调试信息包储存的文件夹)flutter build apk --target-platform android-arm64 --obfuscate --split-debug-info=symbols# 减小打包体积flutter build apk --target-platform android-arm --split-per-abi --no-shrink\n\nflutter web 编译命令 解决 unpkg.org 访问慢或不能访问的问题1.将 canvaskit 打包到输入目录\nflutter build web --web-renderer=canvaskit --release --dart-define=FLUTTER_WEB_CANVASKIT_URL=canvaskit/\n\n2.直接将渲染器改为 html\nflutter build web --web-renderer=html\n\nflutter 集成 flutter_appauth1.appAuthRedirectScheme 的值不能包含下划线，错误例子：com.example.movie_app正确例如：com.example.movieapp\nandroid/app/build.grable\n...android &#123;    ...    defaultConfig &#123;        ...        manifestPlaceholders += [                &#x27;appAuthRedirectScheme&#x27;: &#x27;&lt;your_custom_scheme&gt;&#x27;        ]    &#125;&#125;\n\nflutter 总结\n关于 Material 和 MaterialApp 的使用MaterialApp 需要设置到 app 入口,设置一个就可以了Material 在这几种情况下使用: 使用 SafeArea 时套一层 Material，快速设置透明背景，使用 InkWell 时，套一层 Material, 快速设置背景色 , 快速设置圆角部件\nSafeArea 的使用当部件靠近底部或顶部时,需要套一层 SafeArea. 如果被 appbar 和一些系统自带的底部菜单除外 . 以下列表页也最好套一层 SafeArea\nScaffold 外面不需要套 Material\nprovider 库的使用对 provider 赋值时不需要使用 Selector 或者 Customer 获取 provider,直接从部件中的变量访问已经明确的知道否个部件不需要监听变化(例如弹窗显示),也可以直接从部件中访问变量\n\n常用组件\nOffstage 通过一个参数，来控制 child 是否显示，日常使用中也算是比较常用的控件\n\n常用包\npackage_info 获取 app 包信息\n\n减小打包体积(推荐使用)flutter build apk –target-platform android-arm64 –obfuscate –split-debug-info&#x3D;&#x2F;qisite_app&#x2F;\n减小打包体积flutter build apk –target-platform android-arm –split-per-abi –no-shrink\nbloc 设计模式解释: Business Logic Component ,业务逻辑组件\n","categories":["开发文档","Docker"],"tags":["docker"]},{"title":"Flutter常用包及开源项目","url":"/posts/20230114-99863d956aa9.html","content":"记录 flutter 常用包和一些开源项目\n\n\nFlutter 开源项目flutter_deer | FlutterUnit\nFlutter 常用包\n同步锁synchronized\n\nhttp 请求 dio\n\n选择文件 file_picker\n\n打开文件 open_filex\n\n侧滑组件 flutter_slidable\n\n获取 apk 包版本信息 package_info_plus\n\n获取更新 r_upgrade\n\n获取公共文件夹路径 path_provider\n\n读取文件 cross_file\n\n表单验证 formz\n\n相等判断库 equatable\n\n下拉刷新 pull_to_refresh_flutter3\n\n显示网页 webview_flutter\n\n改变窗口大小 desktop_window\n\n流变换，提供流转换扩展。例如实现：节流效果 stream_transform\n\nbloc 并发处理库 bloc_concurrency\n\n联动的下拉菜单 gzx_dropdown_menu\n\n搜索下拉菜单 dropdown_search\n\n选择输入框 select_form_field\n\n控制屏幕休眠 wakelock\n\n\n","categories":["开发文档","Flutter"],"tags":["Flutter"]},{"title":"Git入门教程","url":"/posts/20230113-9890fa81b24f.html","content":"Git 安装教程及常用命令\n\n\n参考链接下载页面 |官方文档\n安装文档\n在 centos 上安装 git由于通过 yum 安装的是旧版，所以这里使用源码安装\n\n服务器更新 git 版本报错：git-compat-util.h:14:2:error “Required C99 support is in a test phase“\n解决：使用版本 wget https://github.com/git/git/archive/refs/tags/v2.17.0.tar.gz -O git-2.17.0.tar.gz\n\n# 下载源码wget https://github.com/git/git/archive/refs/tags/v2.38.0.tar.gz -O git-2.38.0.tar.gz# 安装编译依赖yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker# 解压缩源码tar -zxvf git-2.38.0.tar.gz# 进入解压目录cd git-2.38.0# 编译源码make prefix=/usr/local/git all# 卸载旧版yum -y remove git# 安装到/usr/local/gitmake prefix=/usr/local/git install# 配置环境变量## 打开文件vi /etc/profile## 在最后添加这行export PATH=$PATH:/usr/local/git/bin# 刷新环境变量source /etc/profile# 查看版本git --version\n\nGit 命令init初始化 git 仓库\n# 初始化普通仓库git init# 初始化裸仓库（中央仓库）git init --bare\n\n\n中央仓库：可以作为 git 中转仓库，能使用命令仓库提交记录，分支等信息。不能提交代码…\n\nclone在没有本地仓库的情况下，从远端或本地拉取代码\ngit clone http://localhost.gitgit clone http://localhost.git demo -b devgit clone E:\\\\working\\\\demo mydemo#使用accessToken拉取代码git clone https://oauth2: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@github.com/mekumiao/Identity.AdminUI.git# 将远程仓库以裸仓库（中央仓库）的方式克隆到本地git clone --bare http://localhost.git\n\ncherry-pick挑拣\n# 将commit提交到当前分支头部git cherry-pick &lt;commit-id&gt;# 退出挑拣git cherry-pick --quit\n\nworktree支持多个分支同时签出\n\n\npush# 设置默认的上游 pull/statusgit push --set-upstream origin main# 推送代码git pushgit push origin maingit push origin dev:dev\n\npull# 拉取代码git pull# 拉取远端origin的main分支代码git pull origin main# 拉取本地不存在的远程分支git fetch origin devgit checkout -b dev origin/dev\n\nfetch获取远端 commit（不合并到本地）\ngit fetchgit fetch origin main\n\nadd# 将修改加入到暂存取git add .\n\ncommit# 提交暂存区的文件，打开一个输入框提示输入messagegit commit# 提交暂存区的文件git commit -m &quot;feat: 提交代码&quot;# 修正最后一次提交git commit --amend\n\nstatus查看当前分支状态：列出文件改动，未跟踪，移除的文件\ngit status# 重置已修改的文件git reset head# 列出未跟踪文件git clean -n# 清理未跟踪文件并且不提示git clean -f\n\nstash储存\n# 获取储存列表git stash list# 显示最新的储存与当前的差异git stash show# 查看详细差异git stash show -pgit stash show -p 0# 储存代码（包含未跟踪的文件）git stash save -u &quot;储存的消息&quot;# 弹出最新的储存（移除储存）git stash pop# 应用最新的储存（保留储存）git stash applygit stash apply 0# 删除最新储存git stash dropgit stash drop 0# 清空储存git stash clear# 从最新的储存创建分支git stash branch\n\nswitch切换分支\ngit switch dev# 基于当前分支创建新分支并切换git switch -b test\n\nbranch分支\n# 列出分支git branchgit branch -lgit branch --list# 列出所有分支，包括远端分支git branch -agit branch --all# 将当前分支名称修改为maingit branch -m maingit branch --move main# 删除分支（不能删除当前分支）git branch -d testgit branch --delete test# 复制当前分支到test，并且包含refloggit branch -c testgit branch --copy test# 将本地当前分支与远程分支关联git branch --set-upstream-to origin/main\n\nremote# 列出远端git remote# 查看远端详细git remote show origin# 远端删除分支后同步到本地 （使用场景：但重命名本地和远程分支名称为main后，需要将远端分支名称同步到本地）git remote update origin --prunegit remote update origin -p# 关联当前分支与远程分支git branch --set-upstream-to origin/main# 修改远程分支（使用场景：删除远端分支后，本地分支需要执行修剪命令）git remote prune origin\n\nmerge合并分支\n# 将dev分支合并到当前分支git merge dev\n\nrebase变基：可用户合并多个提交、修改已提交的 commit 的 messaged 等等\n# 将dev分支变基到当前分支git rebase dev\n\n修改 commit 信息\n使用命令git rebase -i &lt;commitid&gt;。commitid为要修改的 commit 的前一个 commit,也就是不变的那个 commit\n找到需要修改的 commit，将前面的pick改为reword\n推出当前的编辑器，会打开新的编辑器，提示输入提交信息\n修改信息，wq 保存退出\n\n合并 commit文档\n# startcommid 表示开始的commitid(最先提交)git rebase -i &lt;startcommid&gt; &lt;endcommit&gt;pick：保留该commit（缩写:p）reword：保留该commit，但我需要修改该commit的注释（缩写:r）edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）squash：将该commit和前一个commit合并（缩写:s）fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）exec：执行shell命令（缩写:x）drop：我要丢弃该commit（缩写:d）\n\nreset重置当前分支到指定的 commit\n# 重置代码到最新的提交git reset head# 重置代码到上一次提交(&#x27;^&#x27;符号仅在powershell中有效，cmd亲测无效)git reset head^### 重置到上上次提交git reset head^^\n\n使用 reset 命令停止 merge# id 表示当前分支头部的提交idgit reset --hard id# 然后再执行命令git pull\n\ncheckout检出到 branch、commit，移除已修改的代码\n# 切换到分支maingit checkout main# 切换到dev分支，如果分支不存在则创建git checkout -b dev# 检出远程分支 (本地分支名 远端/分支) 检出远端分支前需要先pull一下git pullgit fetch origin devgit checkout -b dev origin/dev# 重置已修改的文件（未跟踪的代码文件需要使用 clean 命令移除）git checkout .# 清理未跟踪的文件git clean -f# 清理未跟踪的文件夹和文件git clean -df# 清理未跟踪的文件夹和文件，并且包括在.gitignore中声明的文件夹和文件也一起删除git clean -xdf# 清理.gitignore中声明的文件和文件夹git clean -Xdf\n\nconfig修改配置\n# 设置全局用户名和邮箱git config --global user.name mekumiaogit config --global user.email 2319002545@qq.com# 设置全局代理git config --global http.proxy http://127.0.0.1:38457git config --global https.proxy http://127.0.0.1:38457# 取消设置全局代理git config--global--unset http.proxygit config --global --unset https.proxy# 取消https证书验证git config --global http.sslverify false\n","categories":["开发文档","Git"],"tags":["git"]},{"title":"Git分支的正确使用","url":"/posts/20230113-9417b9f3c3f2.html","content":"Git 正确的分支模型\n\n\n\n参考文档\n分支git 分支分为集成分支，功能分支、和修复分支。分别命名为 develop，feature 和 hotfix，均为单数。不可使用 features、future、hotfixes、hotfixs 等错误名称。\n\nmaster（主分支，永远是可用的稳定版本，不能直接在该分支上开发）\ndevelop（开发主分支，所有新功能以这个分支来创建自己的开发分支，该分支只做合并操作，不能直接在该分支上进行开发）\nfeature-xxx（功能开发分支，在 develop 上创建分支，以自己开发功能模块命名，功能测试正常后合并到 develop 分支）\nfeature-xxx-fix（功能 bug 修复分支，feature 分支合并之后发现 bug，在 develop 上创建分支进行修复，之后合并回 develop 分支）PS：feature 分支在申请合并之后，未合并之前还是可以提交代码的，所以 feature 在合并之前还可以在原分支上继续修复 bug\nhotfix-xxx（紧急 bug 修改分支，在 master 分支上创建，修复完成后合并到 master）\nbugfix&#x2F;*分支 （短期从 develop 创建）\nrelease&#x2F;*分支（短期从 develop 创建）\n\n","categories":["开发文档","Git"],"tags":["git"]},{"title":"HTTP 命令行工具","url":"/posts/20230113-12a96213003a.html","content":"使用 httpie 命令行工具测试 api\n\n\n使用文档\n示例# 使用密码模式请求tokenhttps --verify=no -f -v \\  post sts.onlyoned.com/connect/token \\  client_id=movie_app grant_type=password username=admin password=Az.123123\n","categories":["开发文档","命令行工具","HTTPIE"],"tags":["cli","httpie","命令行工具"]},{"title":"PowerShell的高级用法","url":"/posts/20230111-01ebdfa318d9.html","content":"powershell 常用命令\n\n\n使用 findstr 命令参考链接：\nhttps://www.adamfowlerit.com/2017/02/how-to-grep-in-powershell/\nps | findstr frpcps *frpc*\n","categories":["开发文档","PowerShell"],"tags":["powershell"]},{"title":"VSCode常用快捷键","url":"/posts/20230114-25acf3e2322a.html","content":"VSCode 常用快捷键：ctrl + space 打开代码提示…\n\n\n快捷键# 打开代码提示ctrl + space\n\n\n\nctrl + b 切换侧边栏可见性ctrl + shift + e 显示资源管理器或定位当前编辑文件alt + &lt;- 或clt + -&gt; 后退或前进alt + shift + f 格式化代码ctrl + / 注释代码ctrl + tab 切换tabctrl + ~ 打开命令行ctrl + x 快速剪切整行ctrl + p 或 ctrl + e 搜索并打开文件ctrl + shift + p 打开vscode命令面板ctrl + t 根据光标位置字符搜索文件或引用,方法等ctrl + g 跳转到指定行ctrl + y 向前撤销ctrl + . 显示修复选项ctrl + f12 转到实现ctrl + k + s 打开快捷键设置面板ctrl + w 关闭当前编辑页ctrl + shift + &#125; 展开大括号内容ctrl + shift + &#123; 收起大括号内容ctrl + &#125; 整行向后缩进ctrl + &#123; 整行向前缩进ctrl + shift + - 缩小视图ctrl + shift + + 放大视图ctrl + p 打开vscode命令面板 后输入: 转到行 @ 转到符号ctrl + shift + o 转到符号\n","categories":["开发文档","快捷键"],"tags":["VSCode","快捷键"]},{"title":"chrome浏览器debug-network请求过滤","url":"/posts/20230114-f2dfa1bb92c8.html","content":"使用正则过滤请求，根据状态码过滤请求…\n\n\n使用正则过滤在正则表达式前面加上 - 表示排除掉与表达式匹配的请求，反之者筛选出与表达式匹配的请求\n-/.*.jps|.*.ttf|.*.gis|.*.woff2/-/.*.jps|.*.ttf|.*.gis|.*.woff2|.*.svg|.*.json|.*.css|.*.js|.*.otf|.*.pgs|.*.png/\n\n根据返回的状态码过滤\n在命令开头使用 - 来排除请求\n\n\n筛选出发生网络错误的请求\nstatus-code:0\n\n筛选出请求成功的请求\nstatus-code:200\n\n使用空格隔开命令，来实现同时排除掉多个请求状态\n-status-code:200 -status-code:204\n\n","categories":["开发文档","Chrome"],"tags":["Chrome"]},{"title":"flutter bloc 模式注意事项","url":"/posts/20230112-7fd23dc0d9d2.html","content":"flutter bloc 模式注意事项\n\n\n\nState 模型可以不用 const 修饰\nBloc、Repository 、 API 的 Model 最好不共用。Bloc 模型添加 fromRepository 构造函数\nState 中的状态枚举，最好添加 isSuccess 等扩展方法，扩展类追号以 NameStatusX 格式命名\nAPI、Repository 中的 Model 参数最好是加上 required。其中 API 不继承 Equatable\n如果一个页面的构成是由多个不相干的功能组成，数据也没有关联，State 没有继承关系，就可以考虑使用拆分 State\nState 模型参数都不加 required\nState 模型一般包含这几个状态 initial、progress、success、failure 如果是列表则 initial、progress、refreshed、refreshedFailure、loaded、loadedFailure\n巧用 identical 方法判断相等。可空与非可空的两个变量可以使用这个方法判断是否相等\n\n","categories":["开发文档","Docker"],"tags":["docker"]},{"title":"flutter 日志的使用规范","url":"/posts/20230113-b56a288f07fe.html","content":"flutter 日志的使用规范。日志消息以标签开头：error:，request:，respose:… ，这样方便搜索\n\n\n使用的日志 packagelogger\n示例\n日志消息以标签开头：error:，request:，respose:… ，这样方便搜索\n\nlogger.d(&#x27;bloc: $&#123;bloc.runtimeType&#125; on create&#x27;);logger..d(&#x27;bloc: $&#123;bloc.runtimeType&#125; on change&#x27;)      ..v(change);logger.e(&#x27;bloc: $&#123;bloc.runtimeType&#125; on error&#x27;, error, stackTrace);\n","categories":["开发文档","Docker"],"tags":["docker"]},{"title":"MySQL Error: : 'Access denied for user 'root'@'localhost'","url":"/posts/20230119-265dcd512c5d.html","content":"此问题是由于没有给数据库用户 root@localhost 设置密码，同时在服务器内部通过 localhist 访问 mysql 服务所致。\n\n\n缘起由于最近建站需求，笔者需要在内网部署 mysql 服务，在公网服务器上部署网站。让网站直接访问内网部署的 mysql 服务。当然它们是不能直接访问的，需要使用 frp 做内网穿透。如此这般就导致了本文所提到的问题\n分析原因原因大概是：无密码情况下基本就是使用明文在互联网上传输数据，非常不安全，所以 mysql 就干脆拒绝访问。(个人猜测)\n解决方案给 root@localhost 设置密码。下列代码示例中 password$$1 表示密码\nALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED VIA mysql_native_password USING PASSWORD(&#x27;password$$1&#x27;);\n\n\n\n通常 &#39;root&#39;@&#39;localhost&#39; 和 &#39;root&#39;@&#39;%&#39; 会成对出现\n\nlocalhost 表示仅允许本机内部 IP 连接，而 % 表示所有 IP 可连接\n\n\n\n扩展知识设置 &#39;root&#39;@&#39;%&#39; 的密码。\nALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED VIA mysql_native_password USING PASSWORD(&#x27;password$$1&#x27;);\n","categories":["常见问题"],"tags":["MySQL","MariaDB"]},{"title":"openid身份认证","url":"/posts/20230113-ba909db2b1a8.html","content":"使用 skoruba.duende.isadmin 创建 单点登录系统\n\n\nDuende.IdentityServer.Admin\n创建服务dotnet new skoruba.duende.isadmin \\  --name Identity \\  --title 身份认证管理系统 \\  --adminemail &quot;btguigushi@qq.com&quot; \\  --adminpassword &quot;Az.123123&quot; \\  --adminrole admin \\  --adminclientid identity \\  --adminclientsecret identity \\  --dockersupport true\n\nDocker 部署步骤docker run -d --name postgres \\  -e POSTGRES_PASSWORD=Az.123123 \\  --network ui \\  --network-alias db \\  -p 5432:5432 \\  postgres:14.2\n\n常见问题\n创建 Client 后必须设置一个重定向 url，不然会提示无效客户端\n\n自定义证书博客\n\n执行申请证书命令，中间会让你输入一堆国家、公司、邮箱等相关信息。命令完成后会在当前目录下生成 cas.clientservice.cer、cas.clientservice.key 两个文件。.cer 即为证书，.key 是密钥\nopenssl req -newkey rsa:2048 -nodes -keyout cas.clientservice.key -x509 -days 3650 -out cas.clientservice.cer\n\n我们需要将证书和 Key 生成一个文件。执行以下命令。中间会让你输一个密码，需要记下来。完成后在生成 ids4.pfx 证书文件，这个就是 IS4 需要的证书了\nopenssl pkcs12 -export -in cas.clientservice.cer -inkey cas.clientservice.key -out ids4.pfx\n\n","categories":["开发文档","IdentityServer4"],"tags":["IdentityServer4","C#,dotnet","oauth2,openid"]},{"title":"如何取消第三方在微信开通的自动续费服务","url":"/posts/20230119-b6eda1f3e600.html","content":"本文介绍如何关闭掉微信上面的自动续费服务。废话不多说，直接上图文教程。\n\n\n具体步骤1. 点开微信，并来到 “我” 页面，点开 “服务”\n2. 点开 “钱包”\n3. 点开 “支付设置”\n4. 点开 “自动续费”\n5. 找到对应的自动续费项，点开\n6. 点底部的 “关闭扣费项”，然后确认取消即可\n至此就成功的取消掉了自动续费，下个月就不会扣费。\n","categories":["生活技巧"],"tags":["微信","自动取费"]},{"title":"清理dns缓存","url":"/posts/20230114-8a855727a4db.html","content":"使用命令行清理缓存。\n\n\nWindows在 cmd 命令行中执行该行命令即可\nipconfig /flushdns\n\nCentOS\n清理缓存\nnscd -i hosts\n\n如果没有安装 nscd\nyum -y install nscd# 查看状态systemctl status nscd# 启动服务systemctl start nscd# 开机自启systemctl enable nscd\n\n","categories":["开发文档","DNS"],"tags":["dns","缓存"]},{"title":"王冰冰图集","url":"/posts/20230617-25c80cbae204.html","content":"收藏一些王冰冰的图片\n\n\n\n----\n\n\n----\n\n\n----\n\n\n","categories":["相册"],"tags":["图片"]},{"title":"自定义CA根证书及颁发证书","url":"/posts/20230113-7a46a2c07501.html","content":"使用 powershell 命令创建自定义根证书，并且颁发服务器证书\n\n\n参考链接参考文档\n先决条件1.安装 openssl# centos 下载 opensslwget https://www.openssl.org/source/openssl-1.1.1i.tar.gz# windows 安装步骤得自行百度，这里就不写了。因为在写文档之时我已经装好了，没有必要写。\n\n2.在工作目录下新建openssl.cnf文件，内容如下[ v3_ca ]basicConstraints        = critical, CA:TRUEsubjectKeyIdentifier    = hashauthorityKeyIdentifier  = keyid:always, issuer:alwayskeyUsage                = critical, cRLSign, digitalSignature, keyCertSign[ v3_ica ]basicConstraints        = critical, CA:TRUE, pathlen:0subjectKeyIdentifier    = hashauthorityKeyIdentifier  = keyid:always, issuer:alwayskeyUsage                = critical, cRLSign, digitalSignature, keyCertSign[ v3_asus_ca ]basicConstraints        = critical, CA:FALSEsubjectKeyIdentifier    = hashauthorityKeyIdentifier  = keyid:always, issuer:alwayskeyUsage                = critical, nonRepudiation, digitalSignature, keyEncipherment, keyAgreementextendedKeyUsage        = critical, serverAuth, clientAuth, timeStampingsubjectAltName          = @alt_asus_ca[alt_asus_ca]DNS.1=localhostDNS.2=192.168.0.101DNS.3=192.168.43.189IP.1=::1IP.2=127.0.0.1IP.3=192.168.0.101IP.4=192.168.43.189\n\n一、创建根证书（自签名证书）1. 创建证书密钥\nRSA 方式（首选）\n\nopenssl genrsa -out root_ca.key 4096\n\n\nECC 方式\n\nopenssl ecparam -out root_ca.key -name prime256v1 -genkey\n\n2. 创建签名请求openssl req -new -sha256 `  -key root_ca.key `  -out root_ca.csr `  -subj &quot;/C=CN/ST=GD/L=GZ/O=Global Village/OU=IT/CN=root_ca&quot;\n\n3. 创建证书\n生成v3版本证书，携带扩展信息（首选）\n\n# crt 格式openssl x509 -req -sha256 `  -days 3650 `  -extfile openssl.cnf `  -extensions v3_ca `  -signkey root_ca.key `  -in root_ca.csr `  -out root_ca.crt# pem格式openssl x509 -req -sha256 `  -days 3650 `  -extfile openssl.cnf `  -extensions v3_ca `  -signkey root_ca.key `  -in root_ca.csr `  -out root_ca.pem\n\n\n生成v1版本证书\n\n# crt 格式openssl x509 -req -sha256 `  -days 3650 `  -signkey root_ca.key `  -in root_ca.csr `  -out root_ca.crt# pem 格式openssl x509 -req -sha256 `  -days 3650 `  -signkey root_ca.key `  -in root_ca.csr `  -out root_ca.pem\n\n二、创建中间证书1.创建证书密钥\nRSA 方式（首选）\n\nopenssl genrsa -out sign_ca.key 4096\n\n\nECC 方式\n\nopenssl ecparam -out sign_ca.key -name prime256v1 -genkey\n\n2.创建签名请求\n-subj选项中 CN（Common Name）的值必须与CA证书不同，其余信息随便即可\n\nopenssl req -new -sha256 `  -key sign_ca.key `  -out sign_ca.csr `  -subj &quot;/C=CN/ST=GD/L=GZ/O=Global Village/OU=IT/CN=sign_ca&quot;\n\n3.创建证书\n生成v3版本证书，携带扩展信息（首选）\n\n# crt 格式openssl x509 -req -sha256 -CAcreateserial `  -days 3650 `  -extfile openssl.cnf `  -extensions v3_ica `  -CA root_ca.crt `  -CAkey root_ca.key `  -in sign_ca.csr `  -out sign_ca.crt# pem 格式openssl x509 -req -sha256 -CAcreateserial `  -days 3650 `  -extfile openssl.cnf `  -extensions v3_ica `  -CA root_ca.crt `  -CAkey root_ca.key `  -in sign_ca.csr `  -out sign_ca.pem\n\n\n生成v1版本证书\n\n# crt 格式openssl x509 -req -sha256 -CAcreateserial `  -days 3650 `  -CA root_ca.crt `  -CAkey root_ca.key `  -in sign_ca.csr `  -out sign_ca.crt# pem 格式openssl x509 -req -sha256 -CAcreateserial `  -days 3650 `  -CA root_ca.crt `  -CAkey root_ca.key `  -in sign_ca.csr `  -out sign_ca.pem\n\n三、创建服务器证书1.创建证书密钥\nRSA 方式（首选）\n\nopenssl genrsa -out asus_ca.key 4096\n\n\nECC 方式\n\nopenssl ecparam -out asus_ca.key -name prime256v1 -genkey\n\n2.创建签名请求openssl req -new -sha256 `  -key asus_ca.key `  -out asus_ca.csr `  -subj &quot;/C=CN/ST=GD/L=GZ/O=Global Village/OU=IT/CN=asus_ca&quot;\n\n3.创建证书\n生成v3版本证书，携带扩展信息（首选）\n\n# crt 格式openssl x509 -req -sha256 -CAcreateserial `  -days 365 `  -extfile openssl.cnf `  -extensions v3_asus_ca `  -CA sign_ca.crt `  -CAkey sign_ca.key `  -in asus_ca.csr `  -out asus_ca.crt# pem 格式openssl x509 -req -sha256 -CAcreateserial `  -days 365 `  -extfile openssl.cnf `  -extensions v3_asus_ca `  -CA sign_ca.crt `  -CAkey sign_ca.key `  -in asus_ca.csr `  -out asus_ca.pem\n\n\n生成v1版本证书\n\n# crt 格式openssl x509 -req -sha256 -CAcreateserial `  -days 365 `  -CA sign_ca.crt `  -CAkey sign_ca.key `  -in asus_ca.csr `  -out asus_ca.crt# pem 格式openssl x509 -req -sha256 -CAcreateserial `  -days 365 `  -CA sign_ca.crt `  -CAkey sign_ca.key `  -in asus_ca.csr `  -out asus_ca.pem\n\n证书转换提示：der或crt文件仅包含公钥内容。\n\n合并crt为证书链\n\n\n\n当有中间证书时使用证书链。\n证书链文件不包含当前证书（如第三层的证书链文件不包含第三层证书）。\n\n\ntype sign_ca.crt root_ca.crt &gt;&gt; asus_ca-chain.crt\n\n\ncrt+key转为pfx\n\n\n\n-name设置证书的FriendlyName\n-certfile提供证书链文件\n\n\nopenssl pkcs12 -export `  -name asus_ca `  -certfile asus_ca-chain.crt `  -inkey asus_ca.key `  -password pass: `  -in asus_ca.crt `  -out asus_ca.pfx\n\n\npfx转为pem\n\n\n-nokeys导出时不包含私钥\n\nopenssl pkcs12 -nodes -in asus_ca.pfx -password pass: -out asus_ca.pemopenssl pkcs12 -nodes -nokeys -in asus_ca.pfx -password pass: -out asus_ca_nokeys.pem\n\n\npem转为key\n\nopenssl rsa -in asus_ca.pem -out asus_ca.key\n\n\npem转为crt\n\nopenssl x509 -in asus_ca.pem -out asus_ca.crt\n\n\npem转为der\n\nopenssl x509 -outform der -in asus_ca.pem -out asus_ca.der\n\n\nder转为pem\n\nopenssl x509 -inform der -in asus_ca.der -out asus_ca.pem\n\n\ncer转为pem\n\nopenssl x509 -inform der -in asus_ca.cer -out asus_ca.pem\n\n\ncrt转为pem\n\nopenssl x509 -in asus_ca.crt -out asus_ca.pem\n\n\ncrt转为der\n\nopenssl x509 -outform der -in asus_ca.crt -out asus_ca.der\n\n其他命令\n查看证书\n\nopenssl x509 -in asus_ca.crt -text -noout\n\n\n信任证书\n\n\ncertutil 是 windows 平台下的自带工具\n\ncertutil -addstore -f &quot;root_ca.crt&quot; root_ca.crt\n","categories":["开发文档","OpenSSL"],"tags":["openssl","ca","自签名证书"]}]